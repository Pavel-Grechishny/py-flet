=====================================================================================================

    История

=====================================================================================================

00_04 - Современные версии 2.7 и 3...
	Версии похожи, но не зависимы (одна может не заработать в интерпретаторе другого).
	Автор Гвидо Ван Россум (Нидерланды) - первая версия для не профессиональных разработчиков.
	За 00-е годы было написано огромное количество востребанного кода не профессионалами.
	2 версия поддерживается до настоящего момента (05.07.2023) для поддержки устаревшнго кода.
	3.11.4 (3 - ядро, 11 - мажорное обновление, 4 - минорное обновление).
	Версия 3.7 запустится в 3.11, но не гарантируется, что 3.11 запустится в 3.7.
    
00_28 - Интерпритартор
    Один из видов деления языков программирования на компилируемые и интерпретируемые.
    Интерпретируемему языку необходимо приложение (интерпритатор) которму мы передаем наш код.
    Интерпритартор анализирует файл с кодом (текст) и выполняет его построчно (с оговоркой).
    Компилируемому языку так же требуется компилятор (приложение).
    Компилятор так же как и интерпритатор считывает код программы (текст), но на выходе выдает
    исполняемый файл для какой-то конктетной ОС без дополнительных приложений.
    Крупные проекты часто используют многокомпонентный подход, используя несколько языков.
    
00_44 - Работа интерпритатора python
    У интерпритатора python есть несколько компонентов:
    Текстовый парсер (например), читает посимвольно текст кода и вычленяет ключевые слова, идентификаторы (имена переменных), встроенные идентификаторы (list, set), символьные конструкции,
    литералы, операторы... далее подключается Токенезатор (от слова  токен).
    Токенезатор вместе с текстовым парсером разбиваю весь массив текста кода на отдельные фрагменты.
    Далее Анализатор и Ядро интерпритатора, которые начинают создавать объекты и делать запросы 
    в ОС для выделения места в оперативной памяти.
  ! Переменная - это текстовый ярлык на область памяти, где хранится объект. 
  ! Переменная - НЕ КОНТЕЙНЕР (КОРОБКА), ГДЕ ЛЕЖИТ ЧТО ЛИБО - ЭТО ТЕКСТОВЫЙ ЯРЛЫК (ССЫЛКА) НА ОП
  ! Переменная - имя переменной может состоять из символов a-z_0-1_lower_snake_case
  ! Регист имеет значение для имен в коде.
    Все это делает интерпритатор (создает пространство имен, объекты модулей ...)
    Далее интерпритатор начинает выполнять инструкции. 
    
    Компилятор на первом этапе работает похожим образом, но сразу создаёт байт код.
    Байт код - набор низкоуровневых инструкция для ОС и далее для процессора.
    Байт код записывается в файл - исполняемый файл.  
	
=====================================================================================================

    Интерпритартор

=====================================================================================================

00_52 - Что такое интерпритатор python. CLI
    Содержит исполняемый файл интерпритатора - python.exe,ряд динамических библиотек и
    вспомогательные файлы, исполняемые файлы для отдельных компонентов, 
    установщик пакетов pip puthon instalation package.
  ! Важно - исполняемый файл python.exe - это исполняемый файл с интефейсом командной строки (CLI).
  ! CLI - command-line interface.
  
00_58 - Режимы работы интерпритатора
    В любой ОС есть неотьемлемый компонент, который называется Системный Команжный Интерпритатор.
    Это самый главный инструмент низкого уровня с помощью которого мы можем взаимодействовать с ОС.
    Это базовый фбрайузер. Средство для навигации в системе.

01_35 - Режимы работы интерпритатора 
  1 Интерактивный режим
    Как мы обращаемся к интерпритатору в комендной строке?
  > python - запустить интерпритатор в интерактивном режиме
    Интерактивный режим позволяет выполнять инстркуции, коменды, выражения по одной, по порядку.
    Активно используется для проверки работы языковых конструкций (функций, выражений ...).
    Не предназначен для написания сложных программ.
    
  2 Режим выполнения файла с кодом
  > python "path file.py" - выполнить код в файле
    Является основным режимом работы интерпритатора
    После выполнения, завершит работу и передаст командной строке.
    
  3 Режим инспекции
  > python -i "path file.py" - запустить интерпритатор в режиме инспекции
    -i - это ключ (опция запуска).
    Режим инспекции - это комбинация 2-х предыдущих режимов.
    Сначала интерпритатор выполнит файл с кодом, но после этого перейдет в интерактивный режим,
    оставшись в пространстве имен выполненного файла. Можем обращаться ко всем именам, которые 
    использовались в файле.py. 
    Это один из самых простых способов отладки кода. Ручное тестирование.
    
=====================================================================================================

    Потоки ввода вывода

=====================================================================================================


02_27

















=====================================================================================================

    Другое полезное
    
  > dir /b         - посмотреть содержимое каталога
  > where python   - посмотреть в каком каталоге расположен интерпритатор
  > python         - запустить интерпритатор в интерактивном режиме 
  > python file.py - запустить интерпритатор в режиме выполния файла с кодом
  > python -i "path file.py" - запустить интерпритатор в режиме инспекции
  > quit()         - выход из режима
  > ^Z (Ctrl+Z)    - выход из режима
  > type file.py   - показать содержимое текстового файла
  
    Бинарный оператор:
    text = 'Python!' (инструкция присваивания)
    ИНСТРУКЦИЯ НЕ ВОЗВРАЩАЕТ ОБЪЕКТ.
    'Python' - правый операнд, text - левый операнд, = - оператор присваивания
    порядок выполнения:
  1 Сначала выполняется вычисление ВЫРАЖЕНИЯ справа от оператора. ВЫРАЖЕНИЕ - это команда, которая   
    вычисляясь возвращает всегда ОБЪЕКТ, который можно куда то подставить (тут присвоить в переменную).
  2 Затем выполняется инструкция присваивания
  
    Выражение:
    print(type(text))
  1 Вызываем фукцию print() в качестве аргумента хотим передать возвращаемое значение функции type()
  2 Вызываем фукцию type() в качестве аргумента передаем объект данных на который ссылается text.
  3 При помощи переменной text указываем, что объект 'Python!' хотим передать в type как аргумент
  ! Порядок вычисления начнется изнутри самых внутренних скобок.
    В нашем случае выражения являются вложенными.
  